[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Quarto Blog",
    "section": "",
    "text": "Python Library – Tabulate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html",
    "href": "posts/Exposition_Assignment__git_final.html",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "Python is one of the most popular programming language and is widely used by programmers. It’s syntax are easy to understand which makes it beginner’s first choice.\nit also contains a large number of libraries which can be directly imported and used in our program (for example, Pandas, Numpy, Matplotlib). One of such libraries is Tabulate which is specifically used for creating well structured tables in python.\nIn this blog you will get to know about tabulate library, its use , examples and its practical life use cases.\n\n\nThe tabulate library in Python is a powerful tool for creating formatted tables from various data sources. It offers an easy and efficient way to display data in a well-structured, readable format, which is particularly useful for data scientists, analysts, and developers.\nIt provides various options of table to keep your data organised as per your usage.\n\n\n\n\nDisplaying Structured Data\n\n\nConverts lists, dictionaries, and pandas DataFrames into well-formatted tables.\nIdeal for logging, debugging, and presenting results in a readable format.\n\n\nGenerating Reports\n\n\nHelps in creating clean tables for console output.\nSupports exporting tables in various formats like Markdown, HTML, and LaTeX for documentation or presentations.\n\n\nIntegrating with Data Processing Libraries\n\n\nWorks well with pandas, allowing DataFrame tables to be displayed with custom formatting.\n\n\n\n\n\n\n\nStyles include fancy_grid, plain, pipe, html, latex, etc.\n\n\n\n\n\nAllows adding headers, row indices, and column alignments.\n\n\n\n\n\nRequires minimal setup and works efficiently for quick tabular displays.\n\n\n\n\n\nIdeal for generating tables in blogs, reports, and documentation.\n\n\n\n\nLets learn about Tabulate from basic- installation, setuo, types of data, uses etc.\n\n\n\n\nTo install Tabulate library in windows, open your command prompt window and run the following code. You can see it is installed and ready to use!\nAs I am currently working in Google Colab notebook i will install it using same command.\n\npip install tabulate\n\nRequirement already satisfied: tabulate in /usr/local/lib/python3.11/dist-packages (0.9.0)\n\n\nyou can see it is already there so lets now start playing with function of this library!!\nThe following code snippet demonstrates how to format and display tabular data using Python:\n\n from tabulate import tabulate\n\n\ntable = [[\"boy1\",72,175,\"Gujarat\"],[\"boy2\",53,183,\"Maharashtra\"],[\"boy3\",80,173,\"Telangana\"],[\"boy4\",65,160,\"Rajasthan\"]]\nprint(tabulate(table))\n\n----  --  ---  -----------\nboy1  72  175  Gujarat\nboy2  53  183  Maharashtra\nboy3  80  173  Telangana\nboy4  65  160  Rajasthan\n----  --  ---  -----------\n\n\n\n\n\nWe can use Headers argument to add headings to the columns of our table.\n\nhead = [\"Name\",\"Weight\",\"Height\",\"State\"]\nprint(tabulate(table,headers=head))\n\nName      Weight    Height  State\n------  --------  --------  -----------\nboy1          72       175  Gujarat\nboy2          53       183  Maharashtra\nboy3          80       173  Telangana\nboy4          65       160  Rajasthan\n\n\nIf we wish to have the first row itself as the header, we can use headers=“firstrow”\n\nprint(tabulate(table,headers=\"firstrow\"))\n\nboy1      72    175  Gujarat\n------  ----  -----  -----------\nboy2      53    183  Maharashtra\nboy3      80    173  Telangana\nboy4      65    160  Rajasthan\n\n\nIf we have a dictionary or a dataframe and we want the keys to be the header, we can use headers=“keys”.\n\nprint(tabulate({\"Colours\":[\"Blue\",\"Green\",\"Red\"],\n                \"Count\":[\"23\",\"42\",\"36\"],\n                \"object\":[\"ball\",\"pencil\",\"pens\"]},\n               headers=\"keys\"))\n\nColours      Count  object\n---------  -------  --------\nBlue            23  ball\nGreen           42  pencil\nRed             36  pens\n\n\n\n\n\nTo add a column showing the indices, we use showindex=“always” or showindex=True argument to tabulate()\n\nprint(tabulate(table,headers=head, showindex=\"always\"))  # we are continuing the same dataset and by modifying it we can see difference.\n\n    Name      Weight    Height  State\n--  ------  --------  --------  -----------\n 0  boy1          72       175  Gujarat\n 1  boy2          53       183  Maharashtra\n 2  boy3          80       173  Telangana\n 3  boy4          65       160  Rajasthan\n\n\n\n\n\nThere are multiple ways in which a table can be layed out in plain text. We use tablefmt to format a table.\nA few examples are listed below\n\n\nAs the name suggests it is plain and does not have anny line.\n\ntable = [[\"boy1\",72,175,\"Gujarat\"],[\"boy2\",53,183,\"Maharashtra\"],[\"boy3\",80,173,\"Telangana\"],[\"boy4\",65,160,\"Rajasthan\"]]\nprint(tabulate(table,headers=head,tablefmt=\"plain\"))\n\nName      Weight    Height  State\nboy1          72       175  Gujarat\nboy2          53       183  Maharashtra\nboy3          80       173  Telangana\nboy4          65       160  Rajasthan\n\n\n\n\n\nIt is default type of table if table formate is not specified it will be simple.\n\nprint(tabulate(table,headers=head,tablefmt=\"simple\"))\n\nName      Weight    Height  State\n------  --------  --------  -----------\nboy1          72       175  Gujarat\nboy2          53       183  Maharashtra\nboy3          80       173  Telangana\nboy4          65       160  Rajasthan\n\n\n\n\n\nA table format that adds borders around each cell for a clear and organized display of data.\n\nprint(tabulate(table,headers=head,tablefmt=\"grid\"))\n\n+--------+----------+----------+-------------+\n| Name   |   Weight |   Height | State       |\n+========+==========+==========+=============+\n| boy1   |       72 |      175 | Gujarat     |\n+--------+----------+----------+-------------+\n| boy2   |       53 |      183 | Maharashtra |\n+--------+----------+----------+-------------+\n| boy3   |       80 |      173 | Telangana   |\n+--------+----------+----------+-------------+\n| boy4   |       65 |      160 | Rajasthan   |\n+--------+----------+----------+-------------+\n\n\nlineabove=Line(“+”, “-”, “+”, “+”),\nlinebelowheader=Line(“+”, “=”, “+”, “+”),\nlinebetweenrows=Line(“+”, “-”, “+”, “+”),\nlinebelow=Line(“+”, “-”, “+”, “+”),\nheaderrow=DataRow(“|”, “|”, “|”),\ndatarow=DataRow(“|”, “|”, “|”),\npadding=1,\nwith_header_hide=\nthis is the default what grid function plots graph with\n\n\nThe “simple_grid” format in the tabulate library creates a table with hyphens (-) for horizontal lines and spaces for column separation, offering a clean and readable output.\n\nprint(tabulate(table,headers=head,tablefmt=\"simple_grid\"))\n\n┌────────┬──────────┬──────────┬─────────────┐\n│ Name   │   Weight │   Height │ State       │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n└────────┴──────────┴──────────┴─────────────┘\n\n\n\n\n\nrounded_grid (it is a simple grid with rounded corners)\n\nprint(tabulate(table,headers=head,tablefmt=\"rounded_grid\"))\n\n╭────────┬──────────┬──────────┬─────────────╮\n│ Name   │   Weight │   Height │ State       │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n╰────────┴──────────┴──────────┴─────────────╯\n\n\n\n\n\nuses bold lines\n\nprint(tabulate(table,headers=head,tablefmt=\"heavy_grid\"))\n\n┏━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃ Name   ┃   Weight ┃   Height ┃ State       ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy1   ┃       72 ┃      175 ┃ Gujarat     ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy2   ┃       53 ┃      183 ┃ Maharashtra ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy3   ┃       80 ┃      173 ┃ Telangana   ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy4   ┃       65 ┃      160 ┃ Rajasthan   ┃\n┗━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━━━━━┛\n\n\n\n\n\nuses a mix of both thin and bold lines\n\nprint(tabulate(table,headers=head,tablefmt=\"mixed_grid\"))\n\n┍━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━┑\n│ Name   │   Weight │   Height │ State       │\n┝━━━━━━━━┿━━━━━━━━━━┿━━━━━━━━━━┿━━━━━━━━━━━━━┥\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n┕━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━┙\n\n\n\n\n\nUses double lines\n\nprint(tabulate(table,headers=head,tablefmt=\"double_grid\"))\n\n╔════════╦══════════╦══════════╦═════════════╗\n║ Name   ║   Weight ║   Height ║ State       ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy1   ║       72 ║      175 ║ Gujarat     ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy2   ║       53 ║      183 ║ Maharashtra ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy3   ║       80 ║      173 ║ Telangana   ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy4   ║       65 ║      160 ║ Rajasthan   ║\n╚════════╩══════════╩══════════╩═════════════╝\n\n\n\n\n\nUses a mix of single and double lines\n\nprint(tabulate(table,headers=head,tablefmt=\"fancy_grid\"))\n\n╒════════╤══════════╤══════════╤═════════════╕\n│ Name   │   Weight │   Height │ State       │\n╞════════╪══════════╪══════════╪═════════════╡\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n╘════════╧══════════╧══════════╧═════════════╛\n\n\n\n\n\ngenerates tables in Markdown style, making it ideal for documentation and README files.\n\nprint(tabulate(table,headers=head,tablefmt=\"github\"))\n\n| Name   |   Weight |   Height | State       |\n|--------|----------|----------|-------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\n\nit is same as Grid the only difference between them is, in outline there are no lines present between two rows and in Grid there are lines between rows.\nexample of outline are:\n\nprint(tabulate(table,headers=head,tablefmt=\"outline\"))\n# you can see here no line between rows.\n\n+--------+----------+----------+-------------+\n| Name   |   Weight |   Height | State       |\n+========+==========+==========+=============+\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n+--------+----------+----------+-------------+\n\n\nAll other outline_simple stc. are same as grid_simple etc. without lines between rows.\n\n\n\nThe presto table format in tabulate mimics the output style of the Presto SQL command-line interface, displaying clean, grid-like tables.\n\nprint(tabulate(table,headers=head,tablefmt=\"presto\"))\n\n Name   |   Weight |   Height | State\n--------+----------+----------+-------------\n boy1   |       72 |      175 | Gujarat\n boy2   |       53 |      183 | Maharashtra\n boy3   |       80 |      173 | Telangana\n boy4   |       65 |      160 | Rajasthan\n\n\n\n\n\nThe psql table format in tabulate mimics the output style of PostgreSQL, displaying tables with aligned columns and borders for better readability in SQL-like environments.\n\nprint(tabulate(table,headers=head,tablefmt=\"psql\"))\n\n+--------+----------+----------+-------------+\n| Name   |   Weight |   Height | State       |\n|--------+----------+----------+-------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n+--------+----------+----------+-------------+\n\n\n\n\n\nUses “|” characters to separate columns, creating a simple and clean table format.\n\nprint(tabulate(table,headers=head,tablefmt=\"pipe\"))\n\n| Name   |   Weight |   Height | State       |\n|:-------|---------:|---------:|:------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\n\n\nThe asciidoc function in tabulate formats tables as AsciiDoc-style markup, making them suitable for documentation and publishing.\n\nprint(tabulate(table,headers=head,tablefmt=\"asciidoc\"))\n\n[cols=\"8&lt;,10&gt;,10&gt;,13&lt;\",options=\"header\"]\n|====\n| Name   |   Weight |   Height | State       \n| boy1   |       72 |      175 | Gujarat     \n| boy2   |       53 |      183 | Maharashtra \n| boy3   |       80 |      173 | Telangana   \n| boy4   |       65 |      160 | Rajasthan   \n|====\n\n\n\n\n\nThe orgtbl function in tabulate formats tables in Org-mode style, commonly used in Emacs for structured text and data organization.\n\nprint(tabulate(table,headers=head,tablefmt=\"orgtbl\"))\n\n| Name   |   Weight |   Height | State       |\n|--------+----------+----------+-------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\nUsing pipes (|) for column separation and hyphens (-) for line breaks.\n\nprint(tabulate(table,headers=head,tablefmt=\"jira\"))\n\n|| Name   ||   Weight ||   Height || State       ||\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\n\nThe html function in tabulate converts tabular data into an HTML table format, making it easy to embed tables in web pages.\n\nprint(tabulate(table,headers=head,tablefmt=\"html\"))\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;&lt;th&gt;Name  &lt;/th&gt;&lt;th style=\"text-align: right;\"&gt;  Weight&lt;/th&gt;&lt;th style=\"text-align: right;\"&gt;  Height&lt;/th&gt;&lt;th&gt;State      &lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;&lt;td&gt;boy1  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      72&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     175&lt;/td&gt;&lt;td&gt;Gujarat    &lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;boy2  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      53&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     183&lt;/td&gt;&lt;td&gt;Maharashtra&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;boy3  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      80&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     173&lt;/td&gt;&lt;td&gt;Telangana  &lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;boy4  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      65&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     160&lt;/td&gt;&lt;td&gt;Rajasthan  &lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n\n\n\n\nThe latex function in tabulate formats tabular data into LaTeX-compatible tables for seamless integration into LaTeX documents.\n\nprint(tabulate(table,headers=head,tablefmt=\"latex\"))\n\n\\begin{tabular}{lrrl}\n\\hline\n Name   &   Weight &   Height & State       \\\\\n\\hline\n boy1   &       72 &      175 & Gujarat     \\\\\n boy2   &       53 &      183 & Maharashtra \\\\\n boy3   &       80 &      173 & Telangana   \\\\\n boy4   &       65 &      160 & Rajasthan   \\\\\n\\hline\n\\end{tabular}\n\n\n\n\n\n\n\nWhen using Tabulate, it’s clever about aligning your columns. If a column has only numbers, it aligns them by the decimal point or to the right if they’re integers. Text columns, on the other hand, are aligned to the left.\n\nnum=[[12.34],[4.567],[8901],[234.5],[2345.234],[0.00843]]\nprint(tabulate(num))\n\n----------\n  12.34\n   4.567\n8901\n 234.5\n2345.23\n   0.00843\n----------\n\n\n\nprint(tabulate(num ,numalign='right'))\n# aligns to right\nprint(tabulate(num ,numalign='left'))\n#aligns to left\n\n-------\n  12.34\n  4.567\n   8901\n  234.5\n2345.23\n0.00843\n-------\n-------\n12.34\n4.567\n8901\n234.5\n2345.23\n0.00843\n-------\n\n\nTabulate has a feature in which numbers in strings are alligned properly it reads numbers written as string as integers\n\ntable_2 =[['A','23.01'],['B','35.234'],['C','42.45678']]\nprint(tabulate(table_2, numalign=\"right\"))\n\n-  -------\nA    23.01\nB   35.234\nC  42.4568\n-  -------\n\n\nTo not use this feature, use disable_numparse=True\n\nprint(tabulate(table_2, disable_numparse=True,numalign=\"right\"))\n\n-  --------\nA  23.01\nB  35.234\nC  42.45678\n-  --------\n\n\nHere it reads numbers as string and does not aligns it due to numalign.\n\n\n\nYou can customize column alignment in Tabulate to fit your needs. Just use the colalign argument, which can be a list or a tuple of alignment options like right, center, left, decimal (for numbers), and None (to disable alignment).\n\ntable_3=[['apple','banana'],['camel','rat'],['toy','play']]\nprint(tabulate(table_3,colalign=(\"right\")))\n\n-----  ------\napple  banana\ncamel  rat\n  toy  play\n-----  ------\n\n\n\nprint(tabulate(table_3,colalign=(\"left\")))\n\n-----  ------\napple  banana\ncamel  rat\ntoy    play\n-----  ------\n\n\n\n\n\nYou can customize the number format for all decimal columns in Tabulate using the floatfmt argument.\n\ntable_2 =[['A','23.01'],['B','35.234'],['C','42.45678']]\nprint(tabulate(table_2, floatfmt=\".2f\"))\n\n-  -----\nA  23.01\nB  35.23\nC  42.46\n-  -----\n\n\n\nprint(tabulate(table_2, floatfmt=\".3f\"))\n\n-  ------\nA  23.010\nB  35.234\nC  42.457\n-  ------\n\n\nintfmt works similarly for integers\n\n\n\nBy default, Tabulate trims any leading or trailing whitespace from text columns. If you want to keep the whitespace, you can set the global module-level flag PRESERVE_WHITESPACE.\n\ntabulate.PRESERVE_WHITESPACE = True\n\n\n\n\nTo align tables that include wide characters (like fullwidth glyphs from Chinese, Japanese, or Korean), you should install the wcwidth library. You can install it along with Tabulate as follows:\n\npip install tabulate[widechars]\n\nRequirement already satisfied: tabulate[widechars] in /usr/local/lib/python3.11/dist-packages (0.9.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from tabulate[widechars]) (0.2.13)\n\n\nIf the wcwidth library is installed, wide character support is automatically enabled. To turn off wide character support without uninstalling wcwidth, set the global module-level flag WIDE_CHARS_MODE\n\ntabulate.WIDE_CHARS_MODE = False\n\n\n\n\nMost table formats allow multiline cell text, which includes newline characters treated as line breaks.\nBoth data and header rows can contain multiline cells. No additional line breaks are automatically inserted; however, formats like LaTeX and HTML may handle their own formatting. For formats that don’t, newline characters in the cell text are the only method to create line breaks.\nBe aware that some formats, such as simple or plain, do not show row delimiters, making multiline cells potentially unclear to the reader.\n\ntable_4 = [[\"cars\",345],[\"motor\\nbikes\",196]]\nheaders_4 = [\"vehicle\\ntype\", \"count\"]\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"plain\"))\n\nvehicle      count\ntype\ncars           345\nmotor          196\nbikes\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"simple\"))\n\nvehicle      count\ntype\n---------  -------\ncars           345\nmotor          196\nbikes\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"grid\"))\n\n+-----------+---------+\n| vehicle   |   count |\n| type      |         |\n+===========+=========+\n| cars      |     345 |\n+-----------+---------+\n| motor     |     196 |\n| bikes     |         |\n+-----------+---------+\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"fancy_grid\"))\n\n╒═══════════╤═════════╕\n│ vehicle   │   count │\n│ type      │         │\n╞═══════════╪═════════╡\n│ cars      │     345 │\n├───────────┼─────────┤\n│ motor     │     196 │\n│ bikes     │         │\n╘═══════════╧═════════╛\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"pipe\"))\n\n| vehicle   |   count |\n| type      |         |\n|:----------|--------:|\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"orgtbl\"))\n\n| vehicle   |   count |\n| type      |         |\n|-----------+---------|\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"jira\"))\n\n|| vehicle   ||   count ||\n|| type      ||         ||\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"pretty\"))\n\n+---------+-------+\n| vehicle | count |\n|  type   |       |\n+---------+-------+\n|  cars   |  345  |\n|  motor  |  196  |\n|  bikes  |       |\n+---------+-------+\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"psql\"))\n\n+-----------+---------+\n| vehicle   |   count |\n| type      |         |\n|-----------+---------|\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n+-----------+---------+\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"rst\"))\n\n=========  =======\nvehicle      count\ntype\n=========  =======\ncars           345\nmotor          196\nbikes\n=========  =======\n\n\n\n\n\n\nWhile Tabulate supports data with explicitly provided multiline entries, it also offers internal support to handle this.\nThe maxcolwidths argument is a list where each entry specifies the maximum width for its respective column. If a cell exceeds this width, its content will be automatically wrapped. To set the same maximum width for all columns, use a single integer value.\nUse None for columns where no explicit maximum is needed, thus no automatic multiline wrapping will occur.\nThe wrapping process uses Python’s standard textwrap.wrap function with default parameters, except for width.\n\nprint(tabulate([[\"Rahul\", \"CEO\"]], headers=[\"Name\", \"Designation\"], tablefmt=\"grid\", maxcolwidths=[None, 8]))\n\n+--------+---------------+\n| Name   | Designation   |\n+========+===============+\n| Rahul  | CEO           |\n+--------+---------------+\n\n\n\n\n\nIf you want to highlight different sections in a table, you can add one or more separating lines. These lines will match the type specified by the formatter. If no specific line type is defined, a simple empty line will be used.\n\nfrom tabulate import tabulate, SEPARATING_LINE\n\ntable = [[\"A\",23],\n         [\"B\",35],\n         SEPARATING_LINE,\n         [\"C\",42]]\nprint(tabulate(table, tablefmt=\"simple\"))\n\n-  --\nA  23\nB  35\n-  --\nC  42\n-  --\n\n\n\n\n\n\ntabulate() – Displaying Sales Reports in CLI\n\nUse Case: A sales manager wants to generate a quick summary of product sales.\nReal-Life Application: Used in retail businesses for sales summaries.\n\ntabulate_formats() – Choosing the Best Format for a Dashboard\n\nUse Case: A developer needs to check available table formats to pick the best one for a report.\nReal-Life Application: Used by software developers and data analysts to find the best format for console applications or logs.\n\nlatex() – Formatting Research Data for a Report\n\nUse Case: A researcher needs to present structured data in a LaTeX document for publication.\nReal-Life Application: Used in academic research and scientific publications.\n\nhtml() – Creating a Table for a Website\n\nUse Case: A web developer wants to generate an HTML table for a product listing page.\nReal-Life Application: Used in e-commerce websites to display products.\n\nTableFormat() – Creating a Custom Report Format for a Logistics Company\n\nUse Case: A logistics company wants to customize the layout of their shipment report.\nReal-Life Application: Used in logistics companies for structured reports."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#what-is-tablulate",
    "href": "posts/Exposition_Assignment__git_final.html#what-is-tablulate",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "The tabulate library in Python is a powerful tool for creating formatted tables from various data sources. It offers an easy and efficient way to display data in a well-structured, readable format, which is particularly useful for data scientists, analysts, and developers.\nIt provides various options of table to keep your data organised as per your usage."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#key-uses-of-tabulate",
    "href": "posts/Exposition_Assignment__git_final.html#key-uses-of-tabulate",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "Displaying Structured Data\n\n\nConverts lists, dictionaries, and pandas DataFrames into well-formatted tables.\nIdeal for logging, debugging, and presenting results in a readable format.\n\n\nGenerating Reports\n\n\nHelps in creating clean tables for console output.\nSupports exporting tables in various formats like Markdown, HTML, and LaTeX for documentation or presentations.\n\n\nIntegrating with Data Processing Libraries\n\n\nWorks well with pandas, allowing DataFrame tables to be displayed with custom formatting."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#utility-features",
    "href": "posts/Exposition_Assignment__git_final.html#utility-features",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "Styles include fancy_grid, plain, pipe, html, latex, etc.\n\n\n\n\n\nAllows adding headers, row indices, and column alignments.\n\n\n\n\n\nRequires minimal setup and works efficiently for quick tabular displays.\n\n\n\n\n\nIdeal for generating tables in blogs, reports, and documentation.\n\n\n\n\nLets learn about Tabulate from basic- installation, setuo, types of data, uses etc."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#installation-and-setup",
    "href": "posts/Exposition_Assignment__git_final.html#installation-and-setup",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "To install Tabulate library in windows, open your command prompt window and run the following code. You can see it is installed and ready to use!\nAs I am currently working in Google Colab notebook i will install it using same command.\n\npip install tabulate\n\nRequirement already satisfied: tabulate in /usr/local/lib/python3.11/dist-packages (0.9.0)\n\n\nyou can see it is already there so lets now start playing with function of this library!!\nThe following code snippet demonstrates how to format and display tabular data using Python:\n\n from tabulate import tabulate\n\n\ntable = [[\"boy1\",72,175,\"Gujarat\"],[\"boy2\",53,183,\"Maharashtra\"],[\"boy3\",80,173,\"Telangana\"],[\"boy4\",65,160,\"Rajasthan\"]]\nprint(tabulate(table))\n\n----  --  ---  -----------\nboy1  72  175  Gujarat\nboy2  53  183  Maharashtra\nboy3  80  173  Telangana\nboy4  65  160  Rajasthan\n----  --  ---  -----------"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#headers",
    "href": "posts/Exposition_Assignment__git_final.html#headers",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "We can use Headers argument to add headings to the columns of our table.\n\nhead = [\"Name\",\"Weight\",\"Height\",\"State\"]\nprint(tabulate(table,headers=head))\n\nName      Weight    Height  State\n------  --------  --------  -----------\nboy1          72       175  Gujarat\nboy2          53       183  Maharashtra\nboy3          80       173  Telangana\nboy4          65       160  Rajasthan\n\n\nIf we wish to have the first row itself as the header, we can use headers=“firstrow”\n\nprint(tabulate(table,headers=\"firstrow\"))\n\nboy1      72    175  Gujarat\n------  ----  -----  -----------\nboy2      53    183  Maharashtra\nboy3      80    173  Telangana\nboy4      65    160  Rajasthan\n\n\nIf we have a dictionary or a dataframe and we want the keys to be the header, we can use headers=“keys”.\n\nprint(tabulate({\"Colours\":[\"Blue\",\"Green\",\"Red\"],\n                \"Count\":[\"23\",\"42\",\"36\"],\n                \"object\":[\"ball\",\"pencil\",\"pens\"]},\n               headers=\"keys\"))\n\nColours      Count  object\n---------  -------  --------\nBlue            23  ball\nGreen           42  pencil\nRed             36  pens"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#row-indices",
    "href": "posts/Exposition_Assignment__git_final.html#row-indices",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "To add a column showing the indices, we use showindex=“always” or showindex=True argument to tabulate()\n\nprint(tabulate(table,headers=head, showindex=\"always\"))  # we are continuing the same dataset and by modifying it we can see difference.\n\n    Name      Weight    Height  State\n--  ------  --------  --------  -----------\n 0  boy1          72       175  Gujarat\n 1  boy2          53       183  Maharashtra\n 2  boy3          80       173  Telangana\n 3  boy4          65       160  Rajasthan"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#table-format",
    "href": "posts/Exposition_Assignment__git_final.html#table-format",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "There are multiple ways in which a table can be layed out in plain text. We use tablefmt to format a table.\nA few examples are listed below\n\n\nAs the name suggests it is plain and does not have anny line.\n\ntable = [[\"boy1\",72,175,\"Gujarat\"],[\"boy2\",53,183,\"Maharashtra\"],[\"boy3\",80,173,\"Telangana\"],[\"boy4\",65,160,\"Rajasthan\"]]\nprint(tabulate(table,headers=head,tablefmt=\"plain\"))\n\nName      Weight    Height  State\nboy1          72       175  Gujarat\nboy2          53       183  Maharashtra\nboy3          80       173  Telangana\nboy4          65       160  Rajasthan\n\n\n\n\n\nIt is default type of table if table formate is not specified it will be simple.\n\nprint(tabulate(table,headers=head,tablefmt=\"simple\"))\n\nName      Weight    Height  State\n------  --------  --------  -----------\nboy1          72       175  Gujarat\nboy2          53       183  Maharashtra\nboy3          80       173  Telangana\nboy4          65       160  Rajasthan\n\n\n\n\n\nA table format that adds borders around each cell for a clear and organized display of data.\n\nprint(tabulate(table,headers=head,tablefmt=\"grid\"))\n\n+--------+----------+----------+-------------+\n| Name   |   Weight |   Height | State       |\n+========+==========+==========+=============+\n| boy1   |       72 |      175 | Gujarat     |\n+--------+----------+----------+-------------+\n| boy2   |       53 |      183 | Maharashtra |\n+--------+----------+----------+-------------+\n| boy3   |       80 |      173 | Telangana   |\n+--------+----------+----------+-------------+\n| boy4   |       65 |      160 | Rajasthan   |\n+--------+----------+----------+-------------+\n\n\nlineabove=Line(“+”, “-”, “+”, “+”),\nlinebelowheader=Line(“+”, “=”, “+”, “+”),\nlinebetweenrows=Line(“+”, “-”, “+”, “+”),\nlinebelow=Line(“+”, “-”, “+”, “+”),\nheaderrow=DataRow(“|”, “|”, “|”),\ndatarow=DataRow(“|”, “|”, “|”),\npadding=1,\nwith_header_hide=\nthis is the default what grid function plots graph with\n\n\nThe “simple_grid” format in the tabulate library creates a table with hyphens (-) for horizontal lines and spaces for column separation, offering a clean and readable output.\n\nprint(tabulate(table,headers=head,tablefmt=\"simple_grid\"))\n\n┌────────┬──────────┬──────────┬─────────────┐\n│ Name   │   Weight │   Height │ State       │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n└────────┴──────────┴──────────┴─────────────┘\n\n\n\n\n\nrounded_grid (it is a simple grid with rounded corners)\n\nprint(tabulate(table,headers=head,tablefmt=\"rounded_grid\"))\n\n╭────────┬──────────┬──────────┬─────────────╮\n│ Name   │   Weight │   Height │ State       │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n╰────────┴──────────┴──────────┴─────────────╯\n\n\n\n\n\nuses bold lines\n\nprint(tabulate(table,headers=head,tablefmt=\"heavy_grid\"))\n\n┏━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━━━━━━━┓\n┃ Name   ┃   Weight ┃   Height ┃ State       ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy1   ┃       72 ┃      175 ┃ Gujarat     ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy2   ┃       53 ┃      183 ┃ Maharashtra ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy3   ┃       80 ┃      173 ┃ Telangana   ┃\n┣━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━╋━━━━━━━━━━━━━┫\n┃ boy4   ┃       65 ┃      160 ┃ Rajasthan   ┃\n┗━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━━┻━━━━━━━━━━━━━┛\n\n\n\n\n\nuses a mix of both thin and bold lines\n\nprint(tabulate(table,headers=head,tablefmt=\"mixed_grid\"))\n\n┍━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━┯━━━━━━━━━━━━━┑\n│ Name   │   Weight │   Height │ State       │\n┝━━━━━━━━┿━━━━━━━━━━┿━━━━━━━━━━┿━━━━━━━━━━━━━┥\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n┕━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━┷━━━━━━━━━━━━━┙\n\n\n\n\n\nUses double lines\n\nprint(tabulate(table,headers=head,tablefmt=\"double_grid\"))\n\n╔════════╦══════════╦══════════╦═════════════╗\n║ Name   ║   Weight ║   Height ║ State       ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy1   ║       72 ║      175 ║ Gujarat     ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy2   ║       53 ║      183 ║ Maharashtra ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy3   ║       80 ║      173 ║ Telangana   ║\n╠════════╬══════════╬══════════╬═════════════╣\n║ boy4   ║       65 ║      160 ║ Rajasthan   ║\n╚════════╩══════════╩══════════╩═════════════╝\n\n\n\n\n\nUses a mix of single and double lines\n\nprint(tabulate(table,headers=head,tablefmt=\"fancy_grid\"))\n\n╒════════╤══════════╤══════════╤═════════════╕\n│ Name   │   Weight │   Height │ State       │\n╞════════╪══════════╪══════════╪═════════════╡\n│ boy1   │       72 │      175 │ Gujarat     │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy2   │       53 │      183 │ Maharashtra │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy3   │       80 │      173 │ Telangana   │\n├────────┼──────────┼──────────┼─────────────┤\n│ boy4   │       65 │      160 │ Rajasthan   │\n╘════════╧══════════╧══════════╧═════════════╛\n\n\n\n\n\ngenerates tables in Markdown style, making it ideal for documentation and README files.\n\nprint(tabulate(table,headers=head,tablefmt=\"github\"))\n\n| Name   |   Weight |   Height | State       |\n|--------|----------|----------|-------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\n\nit is same as Grid the only difference between them is, in outline there are no lines present between two rows and in Grid there are lines between rows.\nexample of outline are:\n\nprint(tabulate(table,headers=head,tablefmt=\"outline\"))\n# you can see here no line between rows.\n\n+--------+----------+----------+-------------+\n| Name   |   Weight |   Height | State       |\n+========+==========+==========+=============+\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n+--------+----------+----------+-------------+\n\n\nAll other outline_simple stc. are same as grid_simple etc. without lines between rows.\n\n\n\nThe presto table format in tabulate mimics the output style of the Presto SQL command-line interface, displaying clean, grid-like tables.\n\nprint(tabulate(table,headers=head,tablefmt=\"presto\"))\n\n Name   |   Weight |   Height | State\n--------+----------+----------+-------------\n boy1   |       72 |      175 | Gujarat\n boy2   |       53 |      183 | Maharashtra\n boy3   |       80 |      173 | Telangana\n boy4   |       65 |      160 | Rajasthan\n\n\n\n\n\nThe psql table format in tabulate mimics the output style of PostgreSQL, displaying tables with aligned columns and borders for better readability in SQL-like environments.\n\nprint(tabulate(table,headers=head,tablefmt=\"psql\"))\n\n+--------+----------+----------+-------------+\n| Name   |   Weight |   Height | State       |\n|--------+----------+----------+-------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n+--------+----------+----------+-------------+\n\n\n\n\n\nUses “|” characters to separate columns, creating a simple and clean table format.\n\nprint(tabulate(table,headers=head,tablefmt=\"pipe\"))\n\n| Name   |   Weight |   Height | State       |\n|:-------|---------:|---------:|:------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\n\n\nThe asciidoc function in tabulate formats tables as AsciiDoc-style markup, making them suitable for documentation and publishing.\n\nprint(tabulate(table,headers=head,tablefmt=\"asciidoc\"))\n\n[cols=\"8&lt;,10&gt;,10&gt;,13&lt;\",options=\"header\"]\n|====\n| Name   |   Weight |   Height | State       \n| boy1   |       72 |      175 | Gujarat     \n| boy2   |       53 |      183 | Maharashtra \n| boy3   |       80 |      173 | Telangana   \n| boy4   |       65 |      160 | Rajasthan   \n|====\n\n\n\n\n\nThe orgtbl function in tabulate formats tables in Org-mode style, commonly used in Emacs for structured text and data organization.\n\nprint(tabulate(table,headers=head,tablefmt=\"orgtbl\"))\n\n| Name   |   Weight |   Height | State       |\n|--------+----------+----------+-------------|\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\nUsing pipes (|) for column separation and hyphens (-) for line breaks.\n\nprint(tabulate(table,headers=head,tablefmt=\"jira\"))\n\n|| Name   ||   Weight ||   Height || State       ||\n| boy1   |       72 |      175 | Gujarat     |\n| boy2   |       53 |      183 | Maharashtra |\n| boy3   |       80 |      173 | Telangana   |\n| boy4   |       65 |      160 | Rajasthan   |\n\n\n\n\n\nThe html function in tabulate converts tabular data into an HTML table format, making it easy to embed tables in web pages.\n\nprint(tabulate(table,headers=head,tablefmt=\"html\"))\n\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;&lt;th&gt;Name  &lt;/th&gt;&lt;th style=\"text-align: right;\"&gt;  Weight&lt;/th&gt;&lt;th style=\"text-align: right;\"&gt;  Height&lt;/th&gt;&lt;th&gt;State      &lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;&lt;td&gt;boy1  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      72&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     175&lt;/td&gt;&lt;td&gt;Gujarat    &lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;boy2  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      53&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     183&lt;/td&gt;&lt;td&gt;Maharashtra&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;boy3  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      80&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     173&lt;/td&gt;&lt;td&gt;Telangana  &lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td&gt;boy4  &lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;      65&lt;/td&gt;&lt;td style=\"text-align: right;\"&gt;     160&lt;/td&gt;&lt;td&gt;Rajasthan  &lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n\n\n\n\nThe latex function in tabulate formats tabular data into LaTeX-compatible tables for seamless integration into LaTeX documents.\n\nprint(tabulate(table,headers=head,tablefmt=\"latex\"))\n\n\\begin{tabular}{lrrl}\n\\hline\n Name   &   Weight &   Height & State       \\\\\n\\hline\n boy1   &       72 &      175 & Gujarat     \\\\\n boy2   &       53 &      183 & Maharashtra \\\\\n boy3   &       80 &      173 & Telangana   \\\\\n boy4   &       65 &      160 & Rajasthan   \\\\\n\\hline\n\\end{tabular}"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#column-alignment",
    "href": "posts/Exposition_Assignment__git_final.html#column-alignment",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "When using Tabulate, it’s clever about aligning your columns. If a column has only numbers, it aligns them by the decimal point or to the right if they’re integers. Text columns, on the other hand, are aligned to the left.\n\nnum=[[12.34],[4.567],[8901],[234.5],[2345.234],[0.00843]]\nprint(tabulate(num))\n\n----------\n  12.34\n   4.567\n8901\n 234.5\n2345.23\n   0.00843\n----------\n\n\n\nprint(tabulate(num ,numalign='right'))\n# aligns to right\nprint(tabulate(num ,numalign='left'))\n#aligns to left\n\n-------\n  12.34\n  4.567\n   8901\n  234.5\n2345.23\n0.00843\n-------\n-------\n12.34\n4.567\n8901\n234.5\n2345.23\n0.00843\n-------\n\n\nTabulate has a feature in which numbers in strings are alligned properly it reads numbers written as string as integers\n\ntable_2 =[['A','23.01'],['B','35.234'],['C','42.45678']]\nprint(tabulate(table_2, numalign=\"right\"))\n\n-  -------\nA    23.01\nB   35.234\nC  42.4568\n-  -------\n\n\nTo not use this feature, use disable_numparse=True\n\nprint(tabulate(table_2, disable_numparse=True,numalign=\"right\"))\n\n-  --------\nA  23.01\nB  35.234\nC  42.45678\n-  --------\n\n\nHere it reads numbers as string and does not aligns it due to numalign."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#custom-column-allignment",
    "href": "posts/Exposition_Assignment__git_final.html#custom-column-allignment",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "You can customize column alignment in Tabulate to fit your needs. Just use the colalign argument, which can be a list or a tuple of alignment options like right, center, left, decimal (for numbers), and None (to disable alignment).\n\ntable_3=[['apple','banana'],['camel','rat'],['toy','play']]\nprint(tabulate(table_3,colalign=(\"right\")))\n\n-----  ------\napple  banana\ncamel  rat\n  toy  play\n-----  ------\n\n\n\nprint(tabulate(table_3,colalign=(\"left\")))\n\n-----  ------\napple  banana\ncamel  rat\ntoy    play\n-----  ------"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#number-formatting",
    "href": "posts/Exposition_Assignment__git_final.html#number-formatting",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "You can customize the number format for all decimal columns in Tabulate using the floatfmt argument.\n\ntable_2 =[['A','23.01'],['B','35.234'],['C','42.45678']]\nprint(tabulate(table_2, floatfmt=\".2f\"))\n\n-  -----\nA  23.01\nB  35.23\nC  42.46\n-  -----\n\n\n\nprint(tabulate(table_2, floatfmt=\".3f\"))\n\n-  ------\nA  23.010\nB  35.234\nC  42.457\n-  ------\n\n\nintfmt works similarly for integers"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#text-formatting",
    "href": "posts/Exposition_Assignment__git_final.html#text-formatting",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "By default, Tabulate trims any leading or trailing whitespace from text columns. If you want to keep the whitespace, you can set the global module-level flag PRESERVE_WHITESPACE.\n\ntabulate.PRESERVE_WHITESPACE = True"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#wide-fullwidth-cjk-symbols",
    "href": "posts/Exposition_Assignment__git_final.html#wide-fullwidth-cjk-symbols",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "To align tables that include wide characters (like fullwidth glyphs from Chinese, Japanese, or Korean), you should install the wcwidth library. You can install it along with Tabulate as follows:\n\npip install tabulate[widechars]\n\nRequirement already satisfied: tabulate[widechars] in /usr/local/lib/python3.11/dist-packages (0.9.0)\nRequirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from tabulate[widechars]) (0.2.13)\n\n\nIf the wcwidth library is installed, wide character support is automatically enabled. To turn off wide character support without uninstalling wcwidth, set the global module-level flag WIDE_CHARS_MODE\n\ntabulate.WIDE_CHARS_MODE = False"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#multiline-cells",
    "href": "posts/Exposition_Assignment__git_final.html#multiline-cells",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "Most table formats allow multiline cell text, which includes newline characters treated as line breaks.\nBoth data and header rows can contain multiline cells. No additional line breaks are automatically inserted; however, formats like LaTeX and HTML may handle their own formatting. For formats that don’t, newline characters in the cell text are the only method to create line breaks.\nBe aware that some formats, such as simple or plain, do not show row delimiters, making multiline cells potentially unclear to the reader.\n\ntable_4 = [[\"cars\",345],[\"motor\\nbikes\",196]]\nheaders_4 = [\"vehicle\\ntype\", \"count\"]\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"plain\"))\n\nvehicle      count\ntype\ncars           345\nmotor          196\nbikes\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"simple\"))\n\nvehicle      count\ntype\n---------  -------\ncars           345\nmotor          196\nbikes\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"grid\"))\n\n+-----------+---------+\n| vehicle   |   count |\n| type      |         |\n+===========+=========+\n| cars      |     345 |\n+-----------+---------+\n| motor     |     196 |\n| bikes     |         |\n+-----------+---------+\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"fancy_grid\"))\n\n╒═══════════╤═════════╕\n│ vehicle   │   count │\n│ type      │         │\n╞═══════════╪═════════╡\n│ cars      │     345 │\n├───────────┼─────────┤\n│ motor     │     196 │\n│ bikes     │         │\n╘═══════════╧═════════╛\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"pipe\"))\n\n| vehicle   |   count |\n| type      |         |\n|:----------|--------:|\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"orgtbl\"))\n\n| vehicle   |   count |\n| type      |         |\n|-----------+---------|\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"jira\"))\n\n|| vehicle   ||   count ||\n|| type      ||         ||\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"pretty\"))\n\n+---------+-------+\n| vehicle | count |\n|  type   |       |\n+---------+-------+\n|  cars   |  345  |\n|  motor  |  196  |\n|  bikes  |       |\n+---------+-------+\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"psql\"))\n\n+-----------+---------+\n| vehicle   |   count |\n| type      |         |\n|-----------+---------|\n| cars      |     345 |\n| motor     |     196 |\n| bikes     |         |\n+-----------+---------+\n\n\n\n\n\n\nprint(tabulate(table_4, headers=headers_4, tablefmt=\"rst\"))\n\n=========  =======\nvehicle      count\ntype\n=========  =======\ncars           345\nmotor          196\nbikes\n=========  ======="
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#automating-multilines",
    "href": "posts/Exposition_Assignment__git_final.html#automating-multilines",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "While Tabulate supports data with explicitly provided multiline entries, it also offers internal support to handle this.\nThe maxcolwidths argument is a list where each entry specifies the maximum width for its respective column. If a cell exceeds this width, its content will be automatically wrapped. To set the same maximum width for all columns, use a single integer value.\nUse None for columns where no explicit maximum is needed, thus no automatic multiline wrapping will occur.\nThe wrapping process uses Python’s standard textwrap.wrap function with default parameters, except for width.\n\nprint(tabulate([[\"Rahul\", \"CEO\"]], headers=[\"Name\", \"Designation\"], tablefmt=\"grid\", maxcolwidths=[None, 8]))\n\n+--------+---------------+\n| Name   | Designation   |\n+========+===============+\n| Rahul  | CEO           |\n+--------+---------------+"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#adding-separating-lines",
    "href": "posts/Exposition_Assignment__git_final.html#adding-separating-lines",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "If you want to highlight different sections in a table, you can add one or more separating lines. These lines will match the type specified by the formatter. If no specific line type is defined, a simple empty line will be used.\n\nfrom tabulate import tabulate, SEPARATING_LINE\n\ntable = [[\"A\",23],\n         [\"B\",35],\n         SEPARATING_LINE,\n         [\"C\",42]]\nprint(tabulate(table, tablefmt=\"simple\"))\n\n-  --\nA  23\nB  35\n-  --\nC  42\n-  --"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#practical-use-cases",
    "href": "posts/Exposition_Assignment__git_final.html#practical-use-cases",
    "title": "Python Library – Tabulate",
    "section": "",
    "text": "tabulate() – Displaying Sales Reports in CLI\n\nUse Case: A sales manager wants to generate a quick summary of product sales.\nReal-Life Application: Used in retail businesses for sales summaries.\n\ntabulate_formats() – Choosing the Best Format for a Dashboard\n\nUse Case: A developer needs to check available table formats to pick the best one for a report.\nReal-Life Application: Used by software developers and data analysts to find the best format for console applications or logs.\n\nlatex() – Formatting Research Data for a Report\n\nUse Case: A researcher needs to present structured data in a LaTeX document for publication.\nReal-Life Application: Used in academic research and scientific publications.\n\nhtml() – Creating a Table for a Website\n\nUse Case: A web developer wants to generate an HTML table for a product listing page.\nReal-Life Application: Used in e-commerce websites to display products.\n\nTableFormat() – Creating a Custom Report Format for a Logistics Company\n\nUse Case: A logistics company wants to customize the layout of their shipment report.\nReal-Life Application: Used in logistics companies for structured reports."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#we-can-use-a-dataset-of-car-sales-information-which-includes-various-attributes-of-different-car-models-and-their-sales-figures.-this-dataset-will-allow-us-to-demonstrate-how-tabulate-can-be-more-useful-than-pandas-for-creating-tables-especially-when-it-comes-to-formatting-and-readability.",
    "href": "posts/Exposition_Assignment__git_final.html#we-can-use-a-dataset-of-car-sales-information-which-includes-various-attributes-of-different-car-models-and-their-sales-figures.-this-dataset-will-allow-us-to-demonstrate-how-tabulate-can-be-more-useful-than-pandas-for-creating-tables-especially-when-it-comes-to-formatting-and-readability.",
    "title": "Python Library – Tabulate",
    "section": "We can use a dataset of car sales information, which includes various attributes of different car models and their sales figures. This dataset will allow us to demonstrate how tabulate can be more useful than pandas for creating tables, especially when it comes to formatting and readability.",
    "text": "We can use a dataset of car sales information, which includes various attributes of different car models and their sales figures. This dataset will allow us to demonstrate how tabulate can be more useful than pandas for creating tables, especially when it comes to formatting and readability.\n\nimport pandas as pd\n\ndata = {\n    'Make': ['Toyota', 'Honda', 'Ford', 'Chevrolet', 'Nissan', 'BMW', 'Mercedes-Benz', 'Audi', 'Lexus', 'Hyundai'],\n    'Model': ['Camry', 'Civic', 'F-150', 'Silverado', 'Altima', '3 Series', 'C-Class', 'A4', 'RX', 'Sonata'],\n    'Year': [2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022],\n    'Price': [25000, 22000, 35000, 32000, 24000, 45000, 50000, 42000, 48000, 23000],\n    'Sales': [294348, 261225, 726004, 519774, 183183, 243277, 213708, 133964, 101059, 140979],\n    'MPG_City': [28, 30, 20, 21, 28, 26, 25, 24, 31, 28],\n    'MPG_Highway': [39, 38, 26, 28, 39, 36, 34, 32, 28, 38],\n    'Customer_Rating': [4.5, 4.3, 4.7, 4.6, 4.2, 4.4, 4.5, 4.3, 4.6, 4.1]\n}\n\ndf = pd.DataFrame(data)\n\n\nFirst let us see how we can display table using Pandas\n\nprint(df.to_string(index=True))\n\n            Make      Model  Year  Price   Sales  MPG_City  MPG_Highway  Customer_Rating\n0         Toyota      Camry  2022  25000  294348        28           39              4.5\n1          Honda      Civic  2022  22000  261225        30           38              4.3\n2           Ford      F-150  2022  35000  726004        20           26              4.7\n3      Chevrolet  Silverado  2022  32000  519774        21           28              4.6\n4         Nissan     Altima  2022  24000  183183        28           39              4.2\n5            BMW   3 Series  2022  45000  243277        26           36              4.4\n6  Mercedes-Benz    C-Class  2022  50000  213708        25           34              4.5\n7           Audi         A4  2022  42000  133964        24           32              4.3\n8          Lexus         RX  2022  48000  101059        31           28              4.6\n9        Hyundai     Sonata  2022  23000  140979        28           38              4.1\n\n\n\n\nNow we will display same table using Tabulate\n\nfrom tabulate import tabulate\n\nprint(tabulate(df, headers='keys', tablefmt='grid', showindex=True, floatfmt='.2f'))\n\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|    | Make          | Model     |   Year |   Price |   Sales |   MPG_City |   MPG_Highway |   Customer_Rating |\n+====+===============+===========+========+=========+=========+============+===============+===================+\n|  0 | Toyota        | Camry     |   2022 |   25000 |  294348 |         28 |            39 |              4.50 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  1 | Honda         | Civic     |   2022 |   22000 |  261225 |         30 |            38 |              4.30 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  2 | Ford          | F-150     |   2022 |   35000 |  726004 |         20 |            26 |              4.70 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  3 | Chevrolet     | Silverado |   2022 |   32000 |  519774 |         21 |            28 |              4.60 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  4 | Nissan        | Altima    |   2022 |   24000 |  183183 |         28 |            39 |              4.20 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  5 | BMW           | 3 Series  |   2022 |   45000 |  243277 |         26 |            36 |              4.40 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  6 | Mercedes-Benz | C-Class   |   2022 |   50000 |  213708 |         25 |            34 |              4.50 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  7 | Audi          | A4        |   2022 |   42000 |  133964 |         24 |            32 |              4.30 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  8 | Lexus         | RX        |   2022 |   48000 |  101059 |         31 |            28 |              4.60 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n|  9 | Hyundai       | Sonata    |   2022 |   23000 |  140979 |         28 |            38 |              4.10 |\n+----+---------------+-----------+--------+---------+---------+------------+---------------+-------------------+\n\n\nKey points why Tabulate is more suitable than Pandas.\n\nTabulate offers various table formats (e.g., ‘grid’, ‘pipe’, ‘orgtbl’, ‘rst’) that can be easily changed to suit different output needs.\nTabulate automatically aligns numeric columns to the right and text columns to the left, improving readability.\nTabulate allows easy control over decimal places for float values using the ‘floatfmt’ parameter.\nTabulate can create ASCII art tables that are more visually appealing and easier to read in plain text environments.\nTabulate can work with various data structures (lists, dictionaries, pandas DataFrames) making it versatile for different data sources.\nTabulate can generate tables in Markdown and other formats, which is useful for documentation and web content.\nTabulate offers better control over column widths, ensuring a more consistent look across different data types.\nTables generated by tabulate are often easier to copy and paste into other applications while maintaining their structure."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#key-takeaways",
    "href": "posts/Exposition_Assignment__git_final.html#key-takeaways",
    "title": "Python Library – Tabulate",
    "section": "Key takeaways",
    "text": "Key takeaways\n\nAn introduction to Tabulate and its main features\nInstallation and setup instructions\nKey functions like TableFormat and tabulate()\nCustomization options for headers, alignments, and table styles\nPractical usage examples and applications"
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#why-to-use",
    "href": "posts/Exposition_Assignment__git_final.html#why-to-use",
    "title": "Python Library – Tabulate",
    "section": "Why to use ?",
    "text": "Why to use ?\nStill may you have this questoin why to use Tabulate, the answer is simple, It is Versatility,have Multiple Output Formats, can do Automatic Column Alignment, Customization Options, Ease of Use, Readability.\nApart from this some major points are listed down below.\n\nIt works well with other data processing libraries like pandas, enhancing its utility in data analysis workflows.\nTabulate is useful for displaying data in command-line interfaces (CLIs), making it valuable for scripting and automation tasks.\nIt can be used to generate tables for reports and presentations, improving the visual presentation of data.\nTabulate works well in Jupyter Notebooks, a popular environment for data analysis and scientific computing."
  },
  {
    "objectID": "posts/Exposition_Assignment__git_final.html#where-to-use",
    "href": "posts/Exposition_Assignment__git_final.html#where-to-use",
    "title": "Python Library – Tabulate",
    "section": "Where to use?",
    "text": "Where to use?\nThe tabulate library is extremely useful in business, research, web development, logistics, and retail. Whether you’re displaying sales reports, creating research tables, or formatting HTML tables for a website, tabulate helps improve data presentation. Its versatility in handling different input types and output formats makes it a go-to choice for many Python projects."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Template",
    "section": "",
    "text": "Quarto template Text!"
  }
]